# source: https://book.cakephp.org/4.0/en/appendices/4-0-migration-guide.html

services:
    Rector\Renaming\Rector\Class_\RenameClassRector:
        $oldToNewClasses:
            Cake\Database\Type: 'Cake\Database\TypeFactory'
            Cake\Console\ConsoleErrorHandler: 'Cake\Error\ConsoleErrorHandler'

    Rector\Renaming\Rector\Constant\RenameClassConstantRector:
        $oldToNewConstantsByClass:
            Cake\View\View:
                NAME_ELEMENT: 'TYPE_ELEMENT'
                NAME_LAYOUT: 'TYPE_LAYOUT'
            Cake\Mailer\Email:
                MESSAGE_HTML: 'Cake\Mailer\Message::MESSAGE_HTML'
                MESSAGE_TEXT: 'Cake\Mailer\Message::MESSAGE_TEXT'
                MESSAGE_BOTH: 'Cake\Mailer\Message::MESSAGE_BOTH'
                EMAIL_PATTERN: 'Cake\Mailer\Message::EMAIL_PATTERN'

    Rector\Renaming\Rector\MethodCall\RenameMethodRector:
        $oldToNewMethodsByClass:
            Cake\Form\Form:
                errors: 'getErrors'
            Cake\Mailer\Email:
                set: 'setViewVars'
            Cake\ORM\EntityInterface:
                unsetProperty: 'unset'
            Cake\Cache\Cache:
                engine: 'pool'
            Cake\Http\Cookie\Cookie:
                getStringValue: 'getScalarValue'
            Cake\Validation\Validator:
                containsNonAlphaNumeric: 'notAlphaNumeric'
                errors: 'validate'

    Rector\Renaming\Rector\MethodCall\RenameStaticMethodRector:
        $oldToNewMethodByClasses:
            Router:
                pushRequest: setRequest
                setRequestInfo: setRequest
                setRequestContext: setRequest

    Rector\Rector\Property\RenamePropertyRector:
        $oldToNewPropertyByTypes:
            Cake\ORM\Entity:
                _properties: _fields

    Rector\Rector\ClassMethod\AddReturnTypeDeclarationRector:
        $typehintForMethodByClass:
            Cake\Http\BaseApplication:
                bootstrap: 'void'
                bootstrapCli: 'void'
                middleware: 'Cake\Http\MiddlewareQueue'
            Cake\Console\Shell:
                initialize: 'void'
            Cake\Controller\Component:
                initialize: 'void'
            Cake\Controller\Controller:
                initialize: 'void'
                render: 'Cake\Http\Response'
            Cake\ORM\Behavior:
                initialize: 'void'
            Cake\ORM\Table:
                initialize: 'void'
                updateAll: 'int'
                deleteAll: 'int'
                validationDefault: 'Cake\Validation\Validator'
                buildRules: 'Cake\ORM\RulesChecker'
            Cake\View\Helper:
                initialize: 'void'

    Rector\Rector\Typehint\ParentTypehintedArgumentRector:
        $typehintForArgumentByMethodAndClass:
            Cake\ORM\Behavior:
                beforeFind:
                    $event: 'Cake\Event\EventInterface'
                buildValidator:
                    $event: 'Cake\Event\EventInterface'
                buildRules:
                    $event: 'Cake\Event\EventInterface'
                beforeRules:
                    $event: 'Cake\Event\EventInterface'
                afterRules:
                    $event: 'Cake\Event\EventInterface'
                beforeSave:
                    $event: 'Cake\Event\EventInterface'
                afterSave:
                    $event: 'Cake\Event\EventInterface'
                beforeDelete:
                    $event: 'Cake\Event\EventInterface'
                afterDelete:
                    $event: 'Cake\Event\EventInterface'
            Cake\ORM\Table:
                beforeFind:
                    $event: 'Cake\Event\EventInterface'
                buildValidator:
                    $event: 'Cake\Event\EventInterface'
                buildRules:
                    $event: 'Cake\Event\EventInterface'
                beforeRules:
                    $event: 'Cake\Event\EventInterface'
                afterRules:
                    $event: 'Cake\Event\EventInterface'
                beforeSave:
                    $event: 'Cake\Event\EventInterface'
                afterSave:
                    $event: 'Cake\Event\EventInterface'
                beforeDelete:
                    $event: 'Cake\Event\EventInterface'
                afterDelete:
                    $event: 'Cake\Event\EventInterface'
            Cake\Controller\Controller:
                beforeFilter:
                    $event: 'Cake\Event\EventInterface'
                afterFilter:
                    $event: 'Cake\Event\EventInterface'
                beforeRender:
                    $event: 'Cake\Event\EventInterface'
                beforeRedirect:
                    $event: 'Cake\Event\EventInterface'
            Cake\Controller\Component:
                shutdown:
                    $event: 'Cake\Event\EventInterface'
                startup:
                    $event: 'Cake\Event\EventInterface'
                beforeFilter:
                    $event: 'Cake\Event\EventInterface'
                beforeRender:
                    $event: 'Cake\Event\EventInterface'
                beforeRedirect:
                    $event: 'Cake\Event\EventInterface'


    Rector\CakePHP\Rector\MethodCall\RenameMethodCallBasedOnParameterRector:
        $methodNamesByTypes:
            getParam:
              match_parameter: 'paging'
              replace_with: 'getAttribute'
            withParam:
              match_parameter: 'paging'
              replace_with: 'withAttribute'

    Rector\CakePHP\Rector\MethodCall\ModalToGetSetRector:
        $methodNamesByTypes:
            Cake\Console\ConsoleIo:
                styles:
                    set: 'setStyle'
                    get: 'getStyle'
            Cake\Console\ConsoleOutput:
                styles:
                    set: 'setStyle'
                    get: 'getStyle'
            Cake\ORM\EntityInterface:
                isNew:
                    set: 'setNew'
                    get: 'isNew'
