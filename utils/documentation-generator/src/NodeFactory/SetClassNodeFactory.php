<?php

declare(strict_types=1);

namespace Rector\Utils\DocumentationGenerator\NodeFactory;

use PhpParser\Comment\Doc;
use PhpParser\Node\Stmt\Class_;
use PhpParser\Node\Stmt\Nop;
use Rector\Core\PhpParser\Node\NodeFactory;

final class SetClassNodeFactory
{
    /**
     * @var NodeFactory
     */
    private $nodeFactory;

    public function __construct(NodeFactory $nodeFactory)
    {
        $this->nodeFactory = $nodeFactory;
    }

    /**
     * @param array<string, string> $constantNamesToSetNames
     */
    public function createFromConstantNamesToSetNames(array $constantNamesToSetNames): Class_
    {
        $class = new Class_('Set');
        $class->flags |= Class_::MODIFIER_FINAL;

        $this->decorateClassWithDoc($class);

        $lastKey = array_key_last($constantNamesToSetNames);
        foreach ($constantNamesToSetNames as $constantName => $setName) {
            $classConst = $this->nodeFactory->createPublicClassConst($constantName, $setName);
            $class->stmts[] = $classConst;

            // space between constants
            if ($lastKey !== $constantName) {
                $class->stmts[] = new Nop();
            }
        }

        return $class;
    }

    private function decorateClassWithDoc(Class_ $class): void
    {
        $text = sprintf(
            '/**%s * This class is generated by "bin/rector dump-set-constants"%s * DO NOT EDIT MANUALLY%s */',
            PHP_EOL,
            PHP_EOL,
            PHP_EOL
        );
        $class->setDocComment(new Doc($text));
    }
}
