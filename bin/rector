#!/usr/bin/env php
<?php

declare(strict_types=1);

use Rector\Configuration\Configuration;
use Rector\Console\Application;
use Rector\Console\Style\SymfonyStyleFactory;
use Rector\DependencyInjection\RectorContainerFactory;
use Rector\Set\Set;
use Symfony\Component\Console\Input\ArgvInput;
use Symplify\PackageBuilder\Reflection\PrivatesCaller;
use Symplify\SetConfigResolver\ConfigResolver;

@ini_set('memory_limit', '-1'); // @ intentionally: continue anyway

// Performance boost
error_reporting(E_ALL);
ini_set('display_errors', 'stderr');
gc_disable();

define('__RECTOR_RUNNING__', true);

try {
    // Require Composer autoload.php
    $autoloadIncluder = new AutoloadIncluder();
    $autoloadIncluder->includeCwdVendorAutoloadIfExists();
    $autoloadIncluder->autoloadProjectAutoloaderFile('/../../autoload.php');

    $autoloadIncluder->includeDependencyOrRepositoryVendorAutoloadIfExists();

    $rectorConfigsResolver = new RectorConfigsResolver();
    $configs = $rectorConfigsResolver->provide();

    // Build DI container
    $rectorContainerFactory = new RectorContainerFactory();
    $container = $rectorContainerFactory->createFromConfigs($configs);

    /** @var Configuration $configuration */
    $configuration = $container->get(Configuration::class);
    $configuration->setFirstResolverConfig($rectorConfigsResolver->getFirstResolvedConfig());
} catch (Throwable $throwable) {
    $symfonyStyle = (new SymfonyStyleFactory(new PrivatesCaller()))->create();
    $symfonyStyle->error($throwable->getMessage());
    exit(1);
}

$application = $container->get(Application::class);
exit($application->run());


final class AutoloadIncluder
{
    public function includeCwdVendorAutoloadIfExists(): void
    {
        $cwdVendorAutoload = getcwd() . '/vendor/autoload.php';
        if (!is_file($cwdVendorAutoload)) {
            return;
        }

        require_once $cwdVendorAutoload;
    }

    public function includeDependencyOrRepositoryVendorAutoloadIfExists(): void
    {
        $devOrPharVendorAutoload = __DIR__ . '/../vendor/autoload.php';
        if (! is_file($devOrPharVendorAutoload)) {
            return;
        }

        require_once $devOrPharVendorAutoload;
    }

    /**
     * Inspired by https://github.com/phpstan/phpstan-src/blob/e2308ecaf49a9960510c47f5a992ce7b27f6dba2/bin/phpstan#L19
     */
    public function autoloadProjectAutoloaderFile(string $file): void
    {
        $path = dirname(__DIR__) . $file;
        if (!extension_loaded('phar')) {
            if (is_file($path)) {
                require_once $path;
            }
        } else {
            $pharPath = Phar::running(false);
            if ($pharPath === '') {
                if (is_file($path)) {
                    require_once $path;
                }
            } else {
                $path = dirname($pharPath) . $file;
                if (is_file($path)) {
                    require_once $path;
                }
            }
        }
    }
}

final class RectorConfigsResolver
{
    /**
     * @var ConfigResolver
     */
    private $configResolver;

    public function __construct()
    {
        $this->configResolver = new ConfigResolver();
    }

    /**
     * @return string[]
     */
    public function provide(): array
    {
        $configs = [];

        // Detect configuration from --set
        $input = new ArgvInput();

        $setConfig = $this->configResolver->resolveSetFromInputAndDirectory($input, Set::SET_DIRECTORY);
        if ($setConfig !== null) {
            $configs[] = $setConfig;
        }

        // And from --config or default one
        $inputOrFallbackConfig = $this->configResolver->resolveFromInputWithFallback(
            $input,
            ['rector.yml', 'rector.yaml']
        );
        if ($inputOrFallbackConfig !== null) {
            $configs[] = $inputOrFallbackConfig;
        }

        // resolve: parameters > sets
        $parameterSetsConfigs = $this->configResolver->resolveFromParameterSetsFromConfigFiles(
            $configs,
            Set::SET_DIRECTORY
        );
        if ($parameterSetsConfigs !== []) {
            $configs = array_merge($configs, $parameterSetsConfigs);
        }

        return $configs;
    }

    public function getFirstResolvedConfig(): ?string
    {
        return $this->configResolver->getFirstResolvedConfig();
    }
}
